pipeline {
    agent any

    environment {
        SERVICE_NAME = "config-server"
        IMAGE_NAME = "config-server-miyembro"
        IMAGE_TAG = "${IMAGE_NAME}:${BUILD_NUMBER}"
        REPOSITORY_TAG = "${DOCKERHUB_USERNAME}/${IMAGE_TAG}"
        DOCKER_HUB_CREDS = credentials('miyembro-docker-token')
        STACK_NAME = "miyembro"
        SWARM_MANAGER_IP = "172.31.18.227"
    }

    stages {
        stage('Verify Environment') {
            steps {
                script {
                    echo "Checking environment variables..."
                    echo "ORGANIZATION_NAME: ${env.ORGANIZATION_NAME}"
                    echo "DOCKERHUB_USERNAME: ${env.DOCKERHUB_USERNAME}"

                    if (!env.ORGANIZATION_NAME?.trim()) {
                        error("ORGANIZATION_NAME is required but not set")
                    }
                    if (!env.DOCKERHUB_USERNAME?.trim()) {
                        error("DOCKERHUB_USERNAME is required but not set")
                    }
                }
            }
        }

        stage('Preparation') {
            steps {
                deleteDir()  // Replaces cleanWs()
                git credentialsId: 'GitHub', url: "https://github.com/${ORGANIZATION_NAME}/${SERVICE_NAME}", branch: 'main'
                sh 'chmod +x gradlew'
            }
        }

        stage('Build') {
            steps {
                sh './gradlew clean build'
            }
        }

       stage('Build and Push Image') {
           steps {
               script {
                   sh """
                       docker login -u ${DOCKER_HUB_CREDS_USR} -p ${DOCKER_HUB_CREDS_PSW} docker.io
                       docker build -t ${IMAGE_NAME} .
                       docker tag ${IMAGE_NAME} ${REPOSITORY_TAG}
                       docker tag ${IMAGE_NAME} ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:latest
                       docker push ${REPOSITORY_TAG}
                       docker push ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:latest
                   """
               }
           }
       }

     stage('Deploy to Swarm') {
         environment {
             // Use your discovered IP
             SWARM_MANAGER = "172.31.18.227"
             DOCKER_HOST = "tcp://${SWARM_MANAGER}:2376"
         }

         steps {
             withCredentials([
                 file(credentialsId: 'swarm-ca-cert', variable: 'DOCKER_CA'),
                 file(credentialsId: 'swarm-client-cert', variable: 'DOCKER_CERT'),
                 file(credentialsId: 'swarm-client-key', variable: 'DOCKER_KEY')
             ]) {
                 script {
                     sh '''
                         # Configure TLS
                         export DOCKER_TLS_VERIFY=1
                         export DOCKER_CERT_PATH=${WORKSPACE}/certs
                         mkdir -p ${DOCKER_CERT_PATH}
                         cp ${DOCKER_CA} ${DOCKER_CERT_PATH}/ca.pem
                         cp ${DOCKER_CERT} ${DOCKER_CERT_PATH}/cert.pem
                         cp ${DOCKER_KEY} ${DOCKER_CERT_PATH}/key.pem

                         # Verify connection
                         docker node ls

                         # Deploy/update only config-server
                         docker service update \
                           --image ${DOCKERHUB_USERNAME}/config-server-miyembro:latest \
                           --with-registry-auth \
                           ${STACK_NAME}_config-server || \
                         docker service create \
                           --name ${STACK_NAME}_config-server \
                           --publish 8888:8888 \
                           --with-registry-auth \
                           ${DOCKERHUB_USERNAME}/config-server-miyembro:latest
                     '''
                 }
             }
         }
     }
    }

    post {
        always {
            deleteDir()  // Clean workspace after build
            script {
                echo "Pipeline completed - result: ${currentBuild.result}"
            }
        }
        success {
            echo "Pipeline succeeded!"
        }
        failure {
            echo "Pipeline failed!"
        }
    }
}