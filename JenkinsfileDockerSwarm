pipeline {
    agent any

    environment {
        SERVICE_NAME = "config-server"
        IMAGE_NAME = "config-server-miyembro"
        IMAGE_TAG = "${IMAGE_NAME}:${BUILD_NUMBER}"
        REPOSITORY_TAG = "${DOCKERHUB_USERNAME}/${IMAGE_TAG}"
        DOCKER_HUB_CREDS = credentials('miyembro-docker-token')
    }

    stages {
        stage('Preparation') {
            steps {
                deleteDir()
                git credentialsId: 'GitHub', url: "https://github.com/${ORGANIZATION_NAME}/${SERVICE_NAME}", branch: 'main'
                sh 'chmod +x gradlew'
            }
        }

        stage('Build') {
            steps {
                sh './gradlew clean build'
            }
        }

        stage('Build and Push Image') {
            steps {
                script {
                    withCredentials([usernamePassword(
                        credentialsId: 'miyembro-docker-token',
                        usernameVariable: 'DOCKER_USER',
                        passwordVariable: 'DOCKER_TOKEN'
                    )]) {
                        sh '''
                            # Install Buildah if not present
                            if ! command -v buildah &> /dev/null; then
                                echo "Installing Buildah..."
                                sudo apt-get update -qq && sudo apt-get install -y buildah
                            fi

                            # Authenticate and build
                            buildah login -u "$DOCKER_USER" -p "$DOCKER_TOKEN" docker.io
                            buildah bud -t ${IMAGE_NAME} .

                            # Tag and push
                            buildah tag ${IMAGE_NAME} ${REPOSITORY_TAG}
                            buildah tag ${IMAGE_NAME} ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:latest
                            buildah push ${REPOSITORY_TAG}
                            buildah push ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:latest
                        '''
                    }
                }
            }
        }

        stage('Deploy to Swarm') {
            steps {
                script {
                    sh """
                        # Deploy stack to Swarm
                        docker stack deploy \\
                          -c ${WORKSPACE}/docker-compose.yml \\
                          ${SERVICE_NAME} \\
                          --with-registry-auth

                        # Verify deployment
                        docker service ls --filter name=${SERVICE_NAME}
                    """
                }
            }
        }
    }

    post {
        always {
            deleteDir()
            sh 'docker system prune -f || true'  // Cleanup Docker resources
        }
        success {
            echo "Stack deployed successfully!"
            sh "docker service ps ${SERVICE_NAME} --no-trunc"
        }
        failure {
            echo "Deployment failed!"
            sh "docker stack ps ${SERVICE_NAME} --no-trunc || true"
        }
    }
}