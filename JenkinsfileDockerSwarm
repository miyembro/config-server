pipeline {
    agent any

    environment {
        SERVICE_NAME = "config-server"
        IMAGE_NAME = "config-server-miyembro"
        IMAGE_TAG = "${IMAGE_NAME}:${BUILD_NUMBER}"
        REPOSITORY_TAG = "${DOCKERHUB_USERNAME}/${IMAGE_TAG}"
        DOCKER_HUB_CREDS = credentials('miyembro-docker-token')
        STACK_NAME = "miyembro"
    }

    stages {
        stage('Verify Environment') {
            steps {
                script {
                    echo "Checking environment variables..."
                    echo "ORGANIZATION_NAME: ${env.ORGANIZATION_NAME}"
                    echo "DOCKERHUB_USERNAME: ${env.DOCKERHUB_USERNAME}"

                    if (!env.ORGANIZATION_NAME?.trim()) {
                        error("ORGANIZATION_NAME is required but not set")
                    }
                    if (!env.DOCKERHUB_USERNAME?.trim()) {
                        error("DOCKERHUB_USERNAME is required but not set")
                    }
                }
            }
        }

        stage('Preparation') {
            agent any  // Explicit agent declaration for this stage
            steps {
                cleanWs()
                git credentialsId: 'GitHub', url: "https://github.com/${ORGANIZATION_NAME}/${SERVICE_NAME}", branch: 'main'
                sh 'chmod +x gradlew'
            }
        }

        stage('Build') {
            agent any
            steps {
                sh './gradlew clean build'
            }
        }

        stage('Build and Push Image') {
            agent any
            steps {
                script {
                    sh """
                        buildah login -u ${DOCKER_HUB_CREDS_USR} -p ${DOCKER_HUB_CREDS_PSW} docker.io
                        buildah bud -t ${IMAGE_NAME} .
                        buildah tag ${IMAGE_NAME} ${REPOSITORY_TAG}
                        buildah tag ${IMAGE_NAME} ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:latest
                        buildah push ${REPOSITORY_TAG}
                        buildah push ${DOCKERHUB_USERNAME}/${IMAGE_NAME}:latest
                    """
                }
            }
        }

        stage('Deploy to Docker Swarm') {
            agent any
            steps {
                script {
                    sh """
                        docker stack deploy \
                        --compose-file docker-compose.yml \
                        --with-registry-auth \
                        ${STACK_NAME}
                    """
                }
            }
        }
    }

    post {
        always {
            cleanWs()
            script {
                echo "Pipeline completed - result: ${currentBuild.result}"
            }
        }
        success {
            echo "Pipeline succeeded!"
            slackSend(color: 'good', message: "SUCCESS: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
        }
        failure {
            echo "Pipeline failed!"
            slackSend(color: 'danger', message: "FAILED: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
        }
    }
}